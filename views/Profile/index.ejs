<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="shortcut icon" href="/images/fav.svg" type="image/x-icon">
    <title>Profile</title>
</head>

<body class="flex justify-center items-center h-screen">
    <div class="h-full p-8">
        <div class="bg-white rounded-lg shadow-xl pb-8">

            <div class="w-full h-[250px] relative">
                <% if (user.banner=="https://vojislavd.com/ta-template-demo/assets/img/profile-background.jpg" ) { %>
                    <img src="https://vojislavd.com/ta-template-demo/assets/img/profile-background.jpg"
                        class="w-full h-[250px] object-cover rounded-tl-lg rounded-tr-lg" id="bannerImage" alt="Banner">
                    <% } else { %>
                        <img src="/profiles/<%= user.banner %>"
                            class="w-full h-[250px] object-cover rounded-tl-lg rounded-tr-lg" id="bannerImage"
                            alt="Banner">
                        <% } %>


                            <% if (owner) { %>
                                <button id="editBannerBtn"
                                    class="absolute bottom-3 right-3 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-75">
                                    <i class="fas fa-edit"> <input type="file" id="bannerInput" accept="image/*"
                                            class="hidden"></i>
                                </button>
                                <% } %>


            </div>
            <div class="flex  flex-col items-center -mt-20">
                <img src="/profiles/<%= user.profile_pic %>"
                    class="w-36 h-36  object-cover border-2 cursor-pointer z-10 border-black rounded-full shadow-lg"
                    alt="Profile Picture" id="profileImage">
                <input type="file" id="profileInput" accept="image/*" class="hidden">

                <div class="flex items-center space-x-2 mt-2">
                    <p class="text-2xl">
                        <%= user.full_name %>
                    </p>
                    <span class="bg-blue-500 rounded-full p-1" title="Verified">
                        <svg xmlns="http://www.w3.org/2000/svg" class="text-gray-100 h-2.5 w-2.5" fill="none"
                            viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="4" d="M5 13l4 4L19 7">
                            </path>
                        </svg>
                    </span>
                </div>
                <p class="text-gray-700">
                    <%= user.small_about %>
                </p>
                <p class="text-sm text-gray-500">
                    <%= user.designation %>
                </p>
                <div class="flex items-center space-x-4 mt-2">
                    <p>
                        <%= data.countRepo %> <span class="text-gray-500 font-semibold">Repos</span>
                    </p>
                    <p>
                        <span id="showFollowersBtn" class="cursor-pointer">
                            <%= data.countFollow %>
                        </span> <span class="text-gray-500 font-semibold">Followers</span>
                    </p>
                    <p>
                        <span id="showFollowingBtn" class="cursor-pointer">
                            <%= data.countFollowings %>
                        </span> <span class="text-gray-500 font-semibold">Following</span>
                    </p>
                </div>
            </div>

            <div class="flex-1 flex flex-col items-center lg:items-end justify-end px-8 mt-2">

                <div class="flex items-center space-x-4 mt-2">

                    <% if (!owner) { %>
                        <% if (!isFollow) { %>
                            <button id="connectBtn"
                                class="flex items-center bg-blue-600 hover:bg-blue-700 text-gray-100 px-4 py-2 rounded text-sm space-x-2 transition duration-100">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20"
                                    fill="currentColor">
                                    <path
                                        d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z">
                                    </path>
                                </svg>
                                <span>Connect</span>

                            </button>
                            <% } else { %>
                                <button id="disconnectBtn"
                                    class="flex items-center bg-gray-600 hover:bg-gray-700 text-gray-100 px-4 py-2 rounded text-sm space-x-2 transition duration-100">
                                    <i class="fa-solid fa-check"></i>
                                    <span>Following</span>

                                </button>
                                <% } %>

                                    <% } else { %>
                                        <button
                                            class="flex items-center bg-blue-600 hover:bg-blue-700 text-gray-100 px-4 py-2 rounded text-sm space-x-2 transition duration-100"
                                            id="editProfileBtn">
                                            <i class="fas fa-edit" style="color: #ffffff;"></i>
                                            <span>Edit Profile</span>
                                        </button>
                                        <% } %>


                </div>

                <input type="hidden" id="userId" value="<%= user.id %>">
            </div>
        </div>

        <div class="my-4 flex flex-col 2xl:flex-row space-y-4 2xl:space-y-0 2xl:space-x-4">
            <div class="w-full flex flex-col 2xl:w-1/3">
                <div class="rounded-lg shadow-xl p-8 h-fit bg-white">
                    <h4 class="text-xl text-gray-900 font-bold">Personal Info</h4>
                    <ul class="mt-2 text-gray-700">
                        <li class="flex border-y py-2">
                            <span class="font-bold w-24">Full name:</span>
                            <span class="text-gray-700">
                                <%= user.full_name %>
                            </span>
                        </li>
                        <li class="flex border-b py-2">
                            <span class="font-bold w-24">Birthday:</span>
                            <span class="text-gray-700">
                                <% if (user.birthday) { %>
                                    <%= user.birthday %>
                                        <% } else { %>
                                            <span class="text-gray-400">Not specified</span>
                                            <% } %>
                            </span>
                        </li>
                        <li class="flex border-b py-2">
                            <span class="font-bold w-24">Joined:</span>
                            <span class="text-gray-700">
                                <%= joinedAt %>
                            </span>
                        </li>
                        <li class="flex border-b py-2">
                            <span class="font-bold w-24">Mobile:</span>
                            <span class="text-gray-700">
                                <%= user.mobile %>
                            </span>
                        </li>
                        <li class="flex border-b py-2">
                            <span class="font-bold w-24">Email:</span>
                            <span class="text-gray-700">
                                <%= user.email %>
                            </span>
                        </li>
                        <li class="flex border-b py-2">
                            <span class="font-bold w-24">Location:</span>
                            <span class="text-gray-700">
                                <%= user.location %>
                            </span>
                        </li>
                        <li class="flex border-b py-2">
                            <span class="font-bold w-24">Languages:</span>
                            <span class="text-gray-700">
                                <%= user.languages %>
                            </span>
                        </li>

                    </ul>
                </div>

            </div>
            <div class="flex flex-col w-full 2xl:w-2/3">
                <div class="flex-1 bg-white rounded-lg shadow-xl p-8">
                    <div class="flex justify-between">
                        <h4 class="text-xl text-gray-900 font-bold">About</h4>
                        <% if (owner) { %>
                            <button
                                class="flex items-center bg-blue-600 hover:bg-blue-700 text-gray-100 px-4 py-2 rounded text-sm space-x-2 transition duration-100"
                                id="editAbout">
                                <i class="fas fa-pen" style="color: #ffffff;"></i>
                                <span>Edit About</span>
                            </button>
                            <% } %>

                    </div>
                    <p class="mt-2  text-gray-700" id="user-about">
                        <%= user.bio %>
                    </p>
                </div>
                <div class="flex-1 bg-white rounded-lg shadow-xl mt-4 p-8">
                    <h4 class="text-xl text-gray-900 font-bold">Repositories</h4>

                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-6 px-4 md:px-0">
                        <% if (repo.length===0) { %>
                            <p class="text-gray-500 dark:text-gray-400 col-span-full text-center text-lg">No
                                repositories yet.</p>
                            <% } else { %>
                                <% repo.forEach(repo=> { %>
                                    <div
                                        class="repo bg-white text-black flex flex-col rounded-lg shadow-lg p-5 transition-transform transform hover:scale-105 hover:shadow-xl">
                                        <h3 class="text-xl font-semibold text-black  mb-2">
                                            <%= repo.title %>
                                        </h3>

                                        <p class="text-sm text-black mb-3">
                                            📅 Created: <%= new Date(repo.created_at).toLocaleDateString() %>
                                        </p>

                                        <p class="text-sm text-black flex-grow">
                                            <%= repo.domain || "No description provided" %>
                                        </p>

                                        <div class="flex flex-wrap gap-2 mt-3">
                                            <% if (repo.tech_stack) { %>
                                                <% repo.tech_stack.split(",").forEach(tech=> { %>
                                                    <% const techKey=tech.trim().toLowerCase(); %>
                                                        <% const logoUrl=techLogos[techKey] || techLogos["default"]; %>
                                                            <img src="<%= logoUrl %>" alt="<%= tech %>"
                                                                class="w-8 h-8 p-1 bg-gray-200 dark:bg-gray-700 rounded-md shadow">
                                                            <% }); %>
                                                                <% } else { %>
                                                                    <p class="text-gray-500 text-xs">No tech stack
                                                                        provided</p>
                                                                    <% } %>
                                        </div>

                                        <div class="flex gap-3 mt-5">
                                            <a href="/repo/<%= repo.id %>"
                                                class="flex-1 text-center px-4 py-2 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 transition">
                                                Show Repo
                                            </a>
                                            <% if (owner) { %>
                                                <button onclick="deleteRepo('<%= repo.id %>')"
                                                    class="px-4 py-2 bg-red-600 text-white font-medium rounded-lg hover:bg-red-700 transition">
                                                    Delete
                                                </button>
                                                <% } %>
                                        </div>
                                    </div>
                                    <% }); %>
                                        <% } %>
                    </div>

                    <div class="mt-4">
                        <canvas id="verticalBarChart"
                            style="display: block; box-sizing: border-box; height: 414px; width: 828px;" width="1656"
                            height="828"></canvas>
                    </div>
                </div>


            </div>
        </div>
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
        <script>

            if ("<%= owner %>" == "true") {
                document.getElementById("editAbout").addEventListener("click", () => {
                    const about = document.getElementById("user-about").innerText;
                    Swal.fire({
                        title: "Edit About",
                        html: `
                      <button id="generateAiBio" 
                        onclick="generateAiBio(event)"
                        class="flex items-center justify-center gap-2 bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 text-white font-medium px-5 py-2 rounded-lg text-sm shadow-md transition-all duration-200 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed relative">
    
                        <div id="loader" class="hidden animate-spin">
                            <svg class="h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path>
                            </svg>
                        </div>

                        <span id="buttonText">🚀 Generate AI About</span>
                    </button>

                    <textarea id="edit-about" 
                        class="w-full h-32 p-3 text-gray-800 bg-white rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-400 focus:outline-none mt-3 resize-none transition-all duration-200">
                        ${about}
                    </textarea>
                    <p id="error" class="text-red-600 text-sm hidden">About cannot be empty!</p>
                        `,
                        showCancelButton: true,
                        confirmButtonText: "Save",
                        cancelButtonText: "Cancel",
                        showLoaderOnConfirm: true,
                        preConfirm: () => {
                            let isValid = true
                            const about = document.getElementById("edit-about").value.trim();
                            if(!about){
                                 document.getElementById("error").classList.remove("hidden")
                                 isValid=false
                                }
                                return isValid?about:false;

                        }
                    }).then((result)=>{
                        if(result.value && result.isConfirmed){
                            updateAbout(result.value)
                        }
                    })

                })
               
                document.addEventListener("DOMContentLoaded", function () {
                    const bannerImage = document.getElementById("bannerImage");
                    const bannerInput = document.getElementById("bannerInput");
                    const editBannerBtn = document.getElementById("editBannerBtn");

                    const profileImage = document.getElementById("profileImage");
                    const profileInput = document.getElementById("profileInput");

                    // Handle Banner Image Change
                    editBannerBtn.addEventListener("click", () => {
                        bannerInput.click();
                    });

                    bannerInput.addEventListener("change", function () {
                        uploadImage(bannerInput.files[0], "/update-banner", bannerImage);
                    });

                    // Handle Profile Picture Change
                    profileImage.addEventListener("click", () => {
                        profileInput.click();
                    });

                    profileInput.addEventListener("change", function () {
                        uploadImage(profileInput.files[0], "/update-profile-pic", profileImage);
                    });

                    // Function to Upload Image
                    function uploadImage(file, endpoint, imgElement) {
                        if (!file) return;

                        const formData = new FormData();
                        formData.append("image", file);

                        fetch(endpoint, {
                            method: "POST",
                            body: formData
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    imgElement.src = data.imageUrl; // Update UI
                                    Swal.fire("Updated!", "Your image has been updated successfully.", "success");
                                } else {
                                    Swal.fire("Error!", "Failed to update image. Try again.", "error");
                                }
                            })
                            .catch(error => {
                                Swal.fire("Error!", "Something went wrong.", "error");
                            });
                    }
                });
            }

            if (document.getElementById("editProfileBtn")) {
                document.getElementById("editProfileBtn").addEventListener("click", function () {
                  

                    Swal.fire({
                        title: "Edit Profile",
                        showClass: { popup: "animate__animated animate__fadeInUp animate__faster" },
                        hideClass: { popup: "animate__animated animate__fadeOutDown animate__faster" },
                        html: `
                        <div class="text-left space-y-4 px-2 py-2">
                            <label class="block text-gray-700 font-medium">Full Name:</label>
                            <input id="swal-fullName" class="w-full p-2 border rounded-lg focus:ring focus:ring-blue-400" value="<%= user.full_name %>">
                            <p id="error-fullName" class="text-red-500 text-sm hidden">Full Name cannot be empty.</p>
        
                            <label class="block text-gray-700 font-medium">Birthday:</label>
                            <input id="swal-birthday" type="date" class="w-full p-2 border rounded-lg focus:ring focus:ring-blue-400" value="<%= user.birthday %>">
                            <p id="error-birthday" class="text-red-500 text-sm hidden">Birthday cannot be in the future.</p>
        
                            <label class="block text-gray-700 font-medium">Mobile:</label>
                            <input id="swal-mobile" type="tel" class="w-full p-2 border rounded-lg focus:ring focus:ring-blue-400" value="<%= user.mobile %>">
                            <p id="error-mobile" class="text-red-500 text-sm hidden">Enter a valid 10-digit mobile number.</p>
                            <div class="flex justify-between">
                            <label class="block text-gray-700 font-medium">Location:</label>
                               <button id="fetchLocationBtn" onclick="getCityAndState()" class="text-white rounded px-2 py-2 bg-blue-500">Get Location</button>
                               </div>
                            <input id="swal-location" type="text" class="w-full p-2 border rounded-lg focus:ring focus:ring-blue-400" value="<%= user.location %>">
                            <p id="error-location" class="text-red-500 text-sm hidden">Location cannot be empty.</p>
        
                            <label class="block text-gray-700 font-medium">Languages:(Ex: Python, Java, C++)</label>
                            <input id="swal-languages" type="text" class="w-full p-2 border rounded-lg focus:ring focus:ring-blue-400"  value="<%= user.languages %>">
                            <p id="error-languages" class="text-red-500 text-sm hidden">Languages cannot be empty.</p>
                        </div>
                    `,
                        showCancelButton: true,
                        confirmButtonText: "Save Changes",
                        cancelButtonText: "Cancel",
                        preConfirm: () => {
                            let valid = true;

                            const fullName = document.getElementById("swal-fullName").value.trim();
                            const birthday = document.getElementById("swal-birthday").value;
                            const mobile = document.getElementById("swal-mobile").value.trim();
                            const location = document.getElementById("swal-location").value.trim();
                            const languages = document.getElementById("swal-languages").value.trim();
                            const today = new Date().toISOString().split("T")[0];

                            document.querySelectorAll(".text-red-500").forEach(el => el.classList.add("hidden"));

                            if (!fullName) { document.getElementById("error-fullName").classList.remove("hidden"); valid = false; }
                            if (birthday && birthday > today) { document.getElementById("error-birthday").classList.remove("hidden"); valid = false; }
                            if (!/^\d{10}$/.test(mobile)) { document.getElementById("error-mobile").classList.remove("hidden"); valid = false; }
                            if (!location) { document.getElementById("error-location").classList.remove("hidden"); valid = false; }
                            if (!languages) { document.getElementById("error-languages").classList.remove("hidden"); valid = false; }


                            return valid ? { fullName, birthday, mobile, location, languages } : false;
                        }
                    }).then((result) => {
                        if (result.isConfirmed && result.value) {
                            confirmUpdate(result.value);
                        }
                    });
                });

                function confirmUpdate(profileData) {
                    Swal.fire({
                        title: "Are you sure?",
                        text: "Do you want to update your profile?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Yes, update it!",
                        cancelButtonText: "No, cancel"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch("/update-profile", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify(profileData)
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire("Updated!", "Your profile has been updated.", "success").then(() => location.reload());
                                    } else {
                                        Swal.fire("Error!", "Failed to update profile. Try again.", "error");
                                    }
                                })
                                .catch(() => Swal.fire("Error!", "Something went wrong.", "error"));
                        }
                    });
                }

            }

            if (document.getElementById("connectBtn")) {


                document.getElementById("connectBtn").addEventListener("click", () => {
                    const userId = document.getElementById("userId")?.value?.trim();
                    const userFullName = document.getElementById("userFullName")?.value?.trim();

                    if (!userId) {
                        Swal.fire("Error!", "User ID is missing!", "error");
                        return;
                    }

                    fetch(`/follow/${userId}`, { method: "POST" })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: `You are now following <%= user.full_name %>.`,
                                    showConfirmButton: false,
                                    timer: 1500
                                }).then(() => location.reload());
                            } else {
                                Swal.fire("Error!", "Failed to follow user. Try again.", "error");
                            }
                        })
                        .catch(() => Swal.fire("Error!", "Something went wrong.", "error"));
                });
            }

            if (document.getElementById("disconnectBtn")) {

                document.getElementById("disconnectBtn").addEventListener("click", function () {
                    const userId = document.getElementById("userId")?.value?.trim();

                    if (!userId) {
                        Swal.fire("Error!", "User ID is missing!", "error");
                        return;
                    }

                    Swal.fire({
                        title: `Unfollow <%= user.full_name %>?`,
                        text: "Are you sure you want to unfollow?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Yes, Unfollow",
                        cancelButtonText: "Cancel"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/unfollow/${userId}`, { method: "POST" })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            icon: "success",
                                            title: `Successfully unfollowed <%= user.full_name %>.`,
                                            showConfirmButton: false,
                                            timer: 1500
                                        }).then(() => location.reload());
                                    } else {
                                        Swal.fire("Error!", "Failed to unfollow user. Try again.", "error");
                                    }
                                })
                                .catch(() => Swal.fire("Error!", "Something went wrong.", "error"));
                        }
                    });
                });


            }
            //show Follower List and Following List
            document.getElementById("showFollowersBtn").addEventListener("click", async () => {
                try {
                    // Fetch list of follower IDs
                    const res = await fetch("/getFollowers/<%= user.id %>"); // Endpoint to get follower IDs
                    const { followers } = await res.json(); // followers is an array of user IDs

                    if (!followers.length) {
                        Swal.fire("No Followers", "info");
                        return;
                    }


                    // Fetch user details based on IDs
                    const usersRes = await fetch("/getUsersByIds", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ userIds: followers })
                    });

                    const { users } = await usersRes.json(); // Array of user details

                    // Generate follower list HTML
                    const followerListHTML = users.map(user => `
            <div class="flex items-center space-x-3 p-2 border-b">
             <a href="/profile/${user.id}">   <img src="/profiles/${user.profile_pic}" alt="${user.full_name}" class="w-10 h-10 rounded-full border"> </a>
                <div class="flex-1">
                    <p class="text-lg font-semibold"> <a href="/profile/${user.id}"> ${user.full_name}</a></p>
                    <p class="text-gray-500 text-sm">${user.small_about}</p>
                </div>
                 <% if (owner) { %>
                 <button class="unfollowBtn bg-red-500 text-white px-3 py-1 rounded text-sm" data-id="${user.id}">
                    Remove
                </button>
                <% } else { %>
                <button class="bg-blue-500 text-white px-3 py-1 rounded text-sm">
                    <a href="/profile/${user.id}">View Profile</a>
                </button>
                <% } %>
                
            </div>
        `).join("");

                    // Show SweetAlert modal
                    Swal.fire({
                        title: "Followers",
                        html: `<div class="max-h-96 overflow-y-auto">${followerListHTML}</div>`,
                        showCloseButton: true,
                        showConfirmButton: false
                    });

                    // Handle unfollow button clicks
                    document.querySelectorAll(".unfollowBtn").forEach(button => {
                        button.addEventListener("click", async (event) => {
                            const userId = event.target.getAttribute("data-id");

                            // Confirm before unfollowing
                            const confirmUnfollow = await Swal.fire({
                                title: "Are you sure?",
                                text: "Do you want to Remove this user?",
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonText: "Yes, Remove!",
                                cancelButtonText: "Cancel"
                            });

                            if (confirmUnfollow.isConfirmed) {
                                const unfollowRes = await fetch(`/removefollower/${userId}`, { method: "POST" });
                                const unfollowData = await unfollowRes.json();

                                if (unfollowData.success) {
                                    Swal.fire("Removed!", "You have Removed the user.", "success").then(() => location.reload());
                                } else {
                                    Swal.fire("Error!", "Failed to unfollow. Try again.", "error");
                                }
                            }
                        });
                    });

                } catch (error) {
                    Swal.fire("Error!", "Something went wrong.", "error");
                }
            });
            //follwoing List
            document.getElementById("showFollowingBtn").addEventListener("click", async () => {
                try {
                    // Fetch list of follower IDs
                    const res = await fetch("/getFollowing/<%= user.id %>"); // Endpoint to get follower IDs
                    const { following } = await res.json(); // followers is an array of user IDs

                    if (!following.length) {
                        Swal.fire("No Following", "info");
                        return;
                    }
                    // Fetch user details based on IDs
                    const usersRes = await fetch("/getUsersByIds", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ userIds: following })
                    });

                    const { users } = await usersRes.json(); // Array of user details

                    // Generate follower list HTML
                    const followerListHTML = users.map(user => `
            <div class="flex items-center space-x-3 p-2 border-b">
              <a href="/profile/${user.id}">  <img src="/profiles/${user.profile_pic}" alt="${user.full_name}" class="w-10 h-10 rounded-full border"> </a>
                <div class="flex-1">
                    <p class="text-lg font-semibold"> <a href="/profile/${user.id}"> ${user.full_name} </a></p>
                    <p class="text-gray-500 text-sm">${user.small_about}</p>
                </div>
                 <% if (owner) { %>
                 <button class="unfollowBtn bg-red-500 text-white px-3 py-1 rounded text-sm" data-id="${user.id}">
                    Unfollow
                </button>
                <% } else { %>
                <button class="bg-blue-500 text-white px-3 py-1 rounded text-sm">
                    <a href="/profile/${user.id}">View Profile</a>
                </button>
                <% } %>
                
            </div>
        `).join("");

                    // Show SweetAlert modal
                    Swal.fire({
                        title: "Following",
                        html: `<div class="max-h-96 overflow-y-auto">${followerListHTML}</div>`,
                        showCloseButton: true,
                        showConfirmButton: false
                    });

                    // Handle unfollow button clicks
                    document.querySelectorAll(".unfollowBtn").forEach(button => {
                        button.addEventListener("click", async (event) => {
                            const userId = event.target.getAttribute("data-id");

                            // Confirm before unfollowing
                            const confirmUnfollow = await Swal.fire({
                                title: "Are you sure?",
                                text: "Do You want to unfollow this user?",
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonText: "Yes, Unfollow!",
                                cancelButtonText: "Cancel"
                            });

                            if (confirmUnfollow.isConfirmed) {
                                const unfollowRes = await fetch(`/unfollow/${userId}`, { method: "POST" });
                                const unfollowData = await unfollowRes.json();

                                if (unfollowData.success) {
                                    Swal.fire("Unfollowed!", "You have Unfollowed the user.", "success").then(() => location.reload());
                                } else {
                                    Swal.fire("Error!", "Failed to unfollow. Try again.", "error");
                                }
                            }
                        });
                    });

                } catch (error) {
                    Swal.fire("Error!", "Something went wrong.", "error");
                }
            });
            function deleteRepo(repoId) {
                Swal.fire({
                    title: "Are you sure?",
                    text: "You won't be able to revert this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/delete-repo/${repoId}`, { method: "DELETE" })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire("Deleted!", "Your repository has been deleted.", "success")
                                        .then(() => location.reload());
                                } else {
                                    Swal.fire("Error!", "Something went wrong.", "error");
                                }
                            })
                            .catch(() => Swal.fire("Error!", "Failed to delete repository.", "error"));
                    }
                });
            }
            const API_KEY = "pk.f3c294df2c382b58ff13cc619614dc37";  // Replace with your key

            function getCityAndState() {
                if ("geolocation" in navigator) {
                    navigator.geolocation.getCurrentPosition(async function (position) {
                        const lat = position.coords.latitude;
                        const lon = position.coords.longitude;

                        try {
                            const response = await fetch(
                                `https://us1.locationiq.com/v1/reverse.php?key=${API_KEY}&lat=${lat}&lon=${lon}&format=json`
                            );
                            const data = await response.json();
                            console.log(data);

                            const { country, county, state, state_district } = data.address;
                            document.getElementById("swal-location").value = `${county}, ${state_district}, ${state}, ${country}`;
                        } catch (error) {
                            console.error("Error fetching location:", error);
                        }
                    });
                } else {
                    console.log("Geolocation is not supported.");
                }
            }
            const generateAiBio = async (event) => {
                event.preventDefault();
                const loader = document.getElementById("loader");
                loader.classList.remove("hidden");
                try {
                    const response = await fetch("/generate", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ name: '<%= user.full_name %>', languages: '<%= user.languages %>', designation: '<%= user.designation %>' })

                    });
                    const data = await response.json();
                    if (!data.success) Swal.fire({
                        title: "Error",
                        text: "Insufficient Information try filling out your profile",
                        icon: "error",
                    })
                    else {
                        loader.classList.add('hidden')
                        let bio = data.bio;
                        let words = bio.split(" ")
                        const abt = document.getElementById("edit-about")
                        abt.style.overflow = "auto"
                        abt.value = "";
                        words.forEach((word, index) => {
                            setTimeout(() => {
                                abt.value += word + " "
                            }, 50 * index)
                        })
                    }

                } catch (error) {
                    console.error("Error generating AI bio:", error);
                }
            };
            function updateAbout(about){
                Swal.fire({
                    title: "Save this  about ?",
                    text: about,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, update it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/updateBio`,{
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({about})
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire("Updated!", "Your about is updates successfullt!", "success")
                                        .then(() => location.reload());
                                } else {
                                    Swal.fire("Error!", "Something went wrong.", "error");
                                }
                            })
                            .catch(() => Swal.fire("Error!", "Failed to update about.", "error"));
                    }
                });
                
            }
        </script>
</body>

</html>